import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by the flappy_translator package
/// Please do not change anything manually in this file, instead re-generate it when changes are available
class I18n {
  String get appTitle => _getText("appTitle");

  String description({
    @required String name,
  }) {
    String text = _getText("description");
    if (name != null) {
      text = text.replaceAll("%name\$s", name);
    }
    return text;
  }

  String get ok => _getText("ok");

  static Map<String, String> _localizedValues;

  static Map<String, String> _frValues = {
    "appTitle": "Un super titre",
    "description": "Une descritpion avec une variable : %name\$s",
    "ok": "ok",
  };

  static Map<String, String> _enValues = {
    "appTitle": "An awesome title",
    "description": "A descritpion with a variable : %name\$s",
    "ok": "ok",
  };

  static Map<String, Map<String, String>> _allValues = {
    "fr": _frValues,
    "en": _enValues,
  };

  I18n(Locale locale) {
    this._locale = locale;
    _localizedValues = null;
  }

  Locale _locale;

  static I18n of(BuildContext context) {
    return Localizations.of<I18n>(context, I18n);
  }

  String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  Locale get currentLocale => _locale;

  String get currentLanguage => _locale.languageCode;

  static Future<I18n> load(Locale locale) async {
    print(locale.toString());
    final translations = I18n(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('fr'),
    Locale('en'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
